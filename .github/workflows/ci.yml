name: C++ CI (calibration)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    name: ${{ matrix.os }} â€¢ ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14, windows-2022]
        build_type: [Release, Debug]

    env:
      BUILD_DIR: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Linux deps ----------
      - name: Install deps (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libeigen3-dev libceres-dev nlohmann-json3-dev libgtest-dev libgmock-dev

      # ---------- macOS deps ----------
      - name: Install deps (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install cmake ninja eigen ceres-solver nlohmann-json googletest

      # Set VCPKG vars
      - name: Set VCPKG_ROOT (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $vcpkgRoot = "${{ github.workspace }}\vcpkg"
          echo "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKG_TRIPLET=x64-windows" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      
      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Test-Path $env:VCPKG_ROOT)) { git clone https://github.com/microsoft/vcpkg $env:VCPKG_ROOT }
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          & "$env:VCPKG_ROOT\vcpkg.exe" install ceres eigen3 nlohmann-json gtest --triplet $env:VCPKG_TRIPLET
      
      # Configure & Build for Linux/macOS
      - name: Configure (Unix)
        if: runner.os != 'Windows'
        run: |
          cmake -S . -B "$BUILD_DIR" -G "Ninja" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
      
      - name: Build (Unix)
        if: runner.os != 'Windows'
        run: |
          cmake --build "$BUILD_DIR" -j 2
      
      # Configure & Build for Windows
      - name: Configure (Windows, MSVC + Ninja)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Setup MSVC environment
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $vcpkgRoot = $env:VCPKG_ROOT
          Import-Module "$vsPath\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64"
          $env:VCPKG_ROOT = $vcpkgRoot
          
          # Configure with MSVC
          cmake -S . -B "$env:BUILD_DIR" -G "Ninja" `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
            -DCMAKE_TOOLCHAIN_FILE="$vcpkgRoot\scripts\buildsystems\vcpkg.cmake"

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Setup MSVC environment again
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $vcpkgRoot = $env:VCPKG_ROOT
          Import-Module "$vsPath\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64"
          $env:VCPKG_ROOT = $vcpkgRoot

          # Build with MSVC
          cmake --build "$env:BUILD_DIR" --config ${{ matrix.build_type }} -j 2

      # ---------- Smoke tests ----------
      - name: Run smoke test (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          "$BUILD_DIR/examples/homography" << 'EOF'
          4
          0   0    10 20
          100 0    110 18
          100 50   120 70
          0   50   8  72
          EOF

      - name: Run smoke test (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          "$BUILD_DIR/examples/homography.exe" << 'EOF'
          4
          0   0    10 20
          100 0    110 18
          100 50   120 70
          0   50   8  72
          EOF
