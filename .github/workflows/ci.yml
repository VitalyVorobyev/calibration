name: C++ CI (calibration)

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: ${{ matrix.os }} â€¢ ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-14, windows-2022]
        build_type: [Release, Debug]
        exclude:
          - os: windows-2022
            build_type: Debug

    env:
      BUILD_DIR: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Linux deps ----------
      - name: Install deps (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libeigen3-dev libceres-dev nlohmann-json3-dev libgtest-dev libgmock-dev libboost-dev libcli11-dev

      # ---------- macOS deps ----------
      - name: Install deps (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install eigen ceres-solver nlohmann-json googletest boost cli11

      # Set VCPKG vars
      - name: Set VCPKG_ROOT (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $vcpkgRoot = "${{ github.workspace }}\vcpkg"
          echo "VCPKG_ROOT=$vcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKG_TRIPLET=x64-windows" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Bootstrap vcpkg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-not (Test-Path $env:VCPKG_ROOT)) { git clone https://github.com/microsoft/vcpkg $env:VCPKG_ROOT }
          & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          & "$env:VCPKG_ROOT\vcpkg.exe" install ceres eigen3 nlohmann-json gtest boost-pfr cli11 --triplet $env:VCPKG_TRIPLET

      # Configure & Build for Linux/macOS
      - name: Configure (Unix)
        if: runner.os != 'Windows'
        run: |
          cmake -S . -B "$BUILD_DIR" -G "Ninja" \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build (Unix)
        if: runner.os != 'Windows'
        run: |
          cmake --build "$BUILD_DIR" -j 2

      # Configure & Build for Windows
      - name: Configure (Windows, MSVC + Ninja)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Setup MSVC environment
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $vcpkgRoot = $env:VCPKG_ROOT
          Import-Module "$vsPath\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64"
          $env:VCPKG_ROOT = $vcpkgRoot

          # Configure with MSVC
          cmake -S . -B "$env:BUILD_DIR" -G "Ninja" `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
            -DCMAKE_TOOLCHAIN_FILE="$vcpkgRoot\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Setup MSVC environment again
          $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
          $vcpkgRoot = $env:VCPKG_ROOT
          Import-Module "$vsPath\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=x64"
          $env:VCPKG_ROOT = $vcpkgRoot

          # Build with MSVC
          cmake --build "$env:BUILD_DIR" --config ${{ matrix.build_type }} -j 2

      # ---------- Unit tests ----------
      - name: Run unit tests (Unix)
        if: runner.os != 'Windows'
        run: |
          ctest --test-dir "$BUILD_DIR" --output-on-failure

      - name: Run unit tests (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          ctest --test-dir "$env:BUILD_DIR" -C ${{ matrix.build_type }} --output-on-failure

  coverage:
    name: Test Coverage
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake ninja-build libeigen3-dev libceres-dev nlohmann-json3-dev libgtest-dev libgmock-dev libboost-dev libcli11-dev lcov

      - name: Configure with coverage
        run: |
          cmake -S . -B build -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Debug \
            -DCMAKE_CXX_FLAGS="--coverage -fprofile-arcs -ftest-coverage -fprofile-update=atomic" \
            -DCMAKE_EXE_LINKER_FLAGS="--coverage"

      - name: Build
        run: |
          cmake --build build -j 2

      - name: Run tests
        run: |
          ctest --test-dir build --output-on-failure

      - name: Generate coverage report
        run: |
          lcov --capture --directory build --output-file coverage.info --ignore-errors negative,gcov,mismatch
          lcov --remove coverage.info '/usr/*' --output-file coverage.info --ignore-errors negative,gcov,mismatch,unused
          lcov --remove coverage.info '*/test/*' --output-file coverage.info --ignore-errors negative,gcov,mismatch,unused
          lcov --remove coverage.info '*/build/_deps/*' --output-file coverage.info --ignore-errors negative,gcov,mismatch,unused
          lcov --list coverage.info

      - name: Upload coverage to Codecov (v5, OIDC)
        uses: codecov/codecov-action@v5
        with:
          use_oidc: true
          files: ./coverage.info
          flags: unittests
          fail_ci_if_error: true
          verbose: true
